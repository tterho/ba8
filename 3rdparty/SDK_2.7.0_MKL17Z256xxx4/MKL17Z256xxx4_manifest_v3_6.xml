<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MKL17Z256xxx4" name="MKL17Z256xxx4" brief="This is SDK version 2.7.0 manifest file. It describes the content of the MKL17Z256xxx4 and additional settings for tools that support SDK version 2.7.0" format_version="3.6" api_version="2.0.0" configuration="6b8d00608da8f86cb2d22cf3fcd736c1" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2020-02-03 09:30:02.645221-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="twrkl43z48m"/>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso270" name="MCUXpresso270" version="2.7.0" revision="Mcuxpresso 303 2019-12-19"/>
  <compilers>
    <compiler id="compiler_iar" name="iar" type="iar"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="iar" name="IAR_Embedded_Workbench_for_ARM" version="8.40.2" full_name="IAR Embedded Workbench for ARM" compiler="compiler_iar" type="iar" vendor="IAR Systems" vendor_url="http://www.iar.com"/>
  </toolchains>
  <boards>
    <board id="frdmkl43z" name="FRDM-KL43Z" href="http://www.nxp.com/frdm-kl43z" version="1.0.0" package="MKL43Z256VLH4">
      <description>The FRDM-KL43Z is an ultra-low cost development platform for Kinetis速 L families KL43, KL33, KL27, KL17 and KL13 MCUs built on ARM速 Cortex速-M0+ processor running at 48 MHz</description>
      <image path="docs/images" type="image">
        <files mask="FRDM-KL43Z.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>.The FRDM-KL43Z is supported by a range of NXP速 and third-party development software.</content>
          </specific>
        </metadata>
      </metadataSet>
      <examples>
        <example id="frdmkl43z_adc16_continuous_dma" name="adc16_continuous_dma" brief="The ADC16 continuous DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. DMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. DMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="iar" compiler="compiler_iar" category="driver_examples/adc16" path="boards/frdmkl43z/driver_examples/adc16/continuous_dma">
          <external path="boards/frdmkl43z/driver_examples/adc16/continuous_dma" type="xml">
            <files mask="adc16_continuous_dma.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="iar" compiler="compiler_iar" category="driver_examples/adc16" path="boards/frdmkl43z/driver_examples/adc16/interrupt">
          <external path="boards/frdmkl43z/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/adc16_low_power">
          <external path="boards/frdmkl43z/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_adc16_low_power_async_dma" name="adc16_low_power_async_dma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/adc16_low_power_async_dma">
          <external path="boards/frdmkl43z/demo_apps/adc16_low_power_async_dma" type="xml">
            <files mask="adc16_low_power_async_dma.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="iar" compiler="compiler_iar" category="driver_examples/adc16" path="boards/frdmkl43z/driver_examples/adc16/polling">
          <external path="boards/frdmkl43z/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/bubble">
          <external path="boards/frdmkl43z/demo_apps/bubble" type="xml">
            <files mask="bubble.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="iar" compiler="compiler_iar" category="driver_examples/cmp" path="boards/frdmkl43z/driver_examples/cmp/interrupt">
          <external path="boards/frdmkl43z/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="iar" compiler="compiler_iar" category="driver_examples/cmp" path="boards/frdmkl43z/driver_examples/cmp/polling">
          <external path="boards/frdmkl43z/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_i2c_dma_b2b_transfer_master" name="cmsis_i2c_dma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmkl43z/cmsis_driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/frdmkl43z/cmsis_driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_i2c_dma_b2b_transfer_slave" name="cmsis_i2c_dma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmkl43z/cmsis_driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/frdmkl43z/cmsis_driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmkl43z/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/frdmkl43z/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmkl43z/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/frdmkl43z/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_i2c_read_accel_value_transfer" name="cmsis_i2c_read_accel_value_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/i2c" path="boards/frdmkl43z/cmsis_driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmkl43z/cmsis_driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="cmsis_i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_lpuart_dma_transfer" name="cmsis_lpuart_dma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/lpuart" path="boards/frdmkl43z/cmsis_driver_examples/lpuart/dma_transfer">
          <external path="boards/frdmkl43z/cmsis_driver_examples/lpuart/dma_transfer" type="xml">
            <files mask="cmsis_lpuart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/lpuart" path="boards/frdmkl43z/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmkl43z/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_spi_dma_b2b_transfer_master" name="cmsis_spi_dma_b2b_transfer_master" brief="The spi_dma_b2b_transfer example shows how to use SPI CMSIS driver in dma way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_dma_b2b_transfer_master.c' includes the SPI master code.1. SPI master send/received data to/from SPI slave in dma . " toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/spi" path="boards/frdmkl43z/cmsis_driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/frdmkl43z/cmsis_driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_spi_dma_b2b_transfer_slave" name="cmsis_spi_dma_b2b_transfer_slave" brief="The spi_dma_b2b_transfer example shows how to use SPI CMSIS driver in dma way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_dma_b2b_transfer_slave.c' includes the SPI slave code.1. SPI master send/received data to/from SPI slave in dma . " toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/spi" path="boards/frdmkl43z/cmsis_driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/frdmkl43z/cmsis_driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_spi_interrupt_b2b_transfer_master" name="cmsis_spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_b2b_transfer example shows how to use spi CMSIS driver in interrupt way:In this example , we need two boards, one board used as spi master and another board used as spi slave.The file 'spi_interrupt_b2b_transfer_master.c' includes the spi master code.This example uses the transactional API in spi driver.1. spi master send/received data to/from spi slave in interrupt . " toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/spi" path="boards/frdmkl43z/cmsis_driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="boards/frdmkl43z/cmsis_driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_spi_interrupt_b2b_transfer_slave" name="cmsis_spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_b2b_transfer example shows how to use SPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_interrupt_b2b_transfer_slave.c' includes the SPI slave code.This example uses the transactional API in SPI driver.1. SPI master send/received data to/from SPI slave in interrupt . " toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/spi" path="boards/frdmkl43z/cmsis_driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmkl43z/cmsis_driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_uart_dma_transfer" name="cmsis_uart_dma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/uart" path="boards/frdmkl43z/cmsis_driver_examples/uart/dma_transfer">
          <external path="boards/frdmkl43z/cmsis_driver_examples/uart/dma_transfer" type="xml">
            <files mask="cmsis_uart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cmsis_uart_interrupt_transfer" name="cmsis_uart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="cmsis_driver_examples/uart" path="boards/frdmkl43z/cmsis_driver_examples/uart/interrupt_transfer">
          <external path="boards/frdmkl43z/cmsis_driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="cmsis_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_cop" name="cop" brief="The COP Example project is to demonstrate usage of the KSDK cop driver.In this example, after 10 times of refreshing, a timeout reset is generated.Please notice that because COP control registers are write-once only, so the COP_Init function and the COP_Disable function can be called only once after reset.In SystemInit() function which is called in startup code, there is an operation to disable the watchdog if macro DISABLE_WDOG is defined as 0, and by default if the DISABLE_WDOG is not defined, the DISABLE_WDOG is defined as 1. So this example has a special project setting that defines the DISABLE_WDOG macro to 0 so the startup code will skip the disable COP WDOG operation." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/cop">
          <external path="boards/frdmkl43z/driver_examples/cop" type="xml">
            <files mask="cop.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/dac_adc">
          <external path="boards/frdmkl43z/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="iar" compiler="compiler_iar" category="driver_examples/dac" path="boards/frdmkl43z/driver_examples/dac/basic">
          <external path="boards/frdmkl43z/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="iar" compiler="compiler_iar" category="driver_examples/dac" path="boards/frdmkl43z/driver_examples/dac/buffer_interrupt">
          <external path="boards/frdmkl43z/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_dac_continuous_pit_dma" name="dac_continuous_pit_dma" brief="The demo shows how to use the PIT to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PIT is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PIT and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="iar" compiler="compiler_iar" category="driver_examples/dac" path="boards/frdmkl43z/driver_examples/dac/continuous_pit_dma">
          <external path="boards/frdmkl43z/driver_examples/dac/continuous_pit_dma" type="xml">
            <files mask="dac_continuous_pit_dma.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="iar" compiler="compiler_iar" category="driver_examples/dma" path="boards/frdmkl43z/driver_examples/dma/memory_to_memory">
          <external path="boards/frdmkl43z/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_i2c_interrupt_i2c_transfer" name="flexio_i2c_interrupt_i2c_transfer" brief="The flexio_i2c_interrupt example shows how to use flexio i2c master driver in interrupt way:In this example, a flexio simulated i2c master connect to an I2C slave." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/i2c/interrupt_i2c_transfer">
          <external path="boards/frdmkl43z/driver_examples/flexio/i2c/interrupt_i2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_i2c_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/pwm">
          <external path="boards/frdmkl43z/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_spi_dma_spi_transfer_master" name="flexio_spi_dma_spi_transfer_master" brief="The flexio_spi_master_dma_spi_slave example shows how to use flexio spi master driver in dma way:In this example, a flexio simulated master connect to a spi slave ." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/spi/dma_spi_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/flexio/spi/dma_spi_transfer/master" type="xml">
            <files mask="flexio_spi_dma_spi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_spi_dma_spi_transfer_slave" name="flexio_spi_dma_spi_transfer_slave" brief="The flexio_spi_slave_dma_spi_master example shows how to use flexio spi slave driver in dma way:In this example, a flexio simulated slave connect to a spi master." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/spi/dma_spi_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/flexio/spi/dma_spi_transfer/slave" type="xml">
            <files mask="flexio_spi_dma_spi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_spi_int_spi_transfer_master" name="flexio_spi_int_spi_transfer_master" brief="The flexio_spi_master_interrupt_spi_slave example shows how to use flexio spi master driver in interrupt way:In this example, a flexio simulated master connect to a spi slave ." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/spi/int_spi_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/flexio/spi/int_spi_transfer/master" type="xml">
            <files mask="flexio_spi_int_spi_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_spi_int_spi_transfer_slave" name="flexio_spi_int_spi_transfer_slave" brief="The flexio_spi_slave_interrupt_spi_master example shows how to use flexio spi slave driver in interrupt way:In this example, a flexio simulated slave connect to a spi master." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/spi/int_spi_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/flexio/spi/int_spi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_spi_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_uart_dma_transfer" name="flexio_uart_dma_transfer" brief="The flexio_uart_dma example shows how to use flexio uart driver in dma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/uart/dma_transfer">
          <external path="boards/frdmkl43z/driver_examples/flexio/uart/dma_transfer" type="xml">
            <files mask="flexio_uart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/uart/int_rb_transfer">
          <external path="boards/frdmkl43z/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/uart/interrupt_transfer">
          <external path="boards/frdmkl43z/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="iar" compiler="compiler_iar" category="driver_examples/flexio" path="boards/frdmkl43z/driver_examples/flexio/uart/polling_transfer">
          <external path="boards/frdmkl43z/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="iar" compiler="compiler_iar" category="driver_examples/gpio" path="boards/frdmkl43z/driver_examples/gpio/input_interrupt">
          <external path="boards/frdmkl43z/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="iar" compiler="compiler_iar" category="driver_examples/gpio" path="boards/frdmkl43z/driver_examples/gpio/led_output">
          <external path="boards/frdmkl43z/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/hello_world">
          <external path="boards/frdmkl43z/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/interrupt">
          <external path="boards/frdmkl43z/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="iar" compiler="compiler_iar" category="driver_examples/i2c" path="boards/frdmkl43z/driver_examples/i2c/read_accel_value_transfer">
          <external path="boards/frdmkl43z/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/led_blinky">
          <external path="boards/frdmkl43z/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_led_control_bm" name="led_control_bm" brief="The LED demo is used to demonstrate how to use new components. The main function of the demo is to control the led by using the shell or button. For shell, please enter \&quot;help\&quot; to get the help information firstly. Turn on LED by using command \&quot;led on\&quot;. And turn off LED by using command \&quot;led off\&quot;. For button, please press the corresponding button to control LED. Turn on LED when the button is pressed with long press or double click event. And turn off LED when the button is pressed with short press or one click event." toolchain="iar" compiler="compiler_iar" category="component_examples" path="boards/frdmkl43z/component_examples/led_control/bm">
          <external path="boards/frdmkl43z/component_examples/led_control/bm" type="xml">
            <files mask="led_control_bm.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/lptmr">
          <external path="boards/frdmkl43z/driver_examples/lptmr" type="xml">
            <files mask="lptmr.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_dma_rb_transfer" name="lpuart_dma_rb_transfer" brief="The lpuart_dma ring buffer example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/dma_rb_transfer">
          <external path="boards/frdmkl43z/driver_examples/lpuart/dma_rb_transfer" type="xml">
            <files mask="lpuart_dma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_dma_transfer" name="lpuart_dma_transfer" brief="The lpuart_dma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/dma_transfer">
          <external path="boards/frdmkl43z/driver_examples/lpuart/dma_transfer" type="xml">
            <files mask="lpuart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/interrupt">
          <external path="boards/frdmkl43z/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/frdmkl43z/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/frdmkl43z/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="iar" compiler="compiler_iar" category="driver_examples/lpuart" path="boards/frdmkl43z/driver_examples/lpuart/polling">
          <external path="boards/frdmkl43z/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_mcglite" name="mcglite" brief="The MCG_Lite example shows how to use MCG_Lite driver: 1. How to use the mode functions for MCG_Lite mode switch. 2. How to use the frequency functions to get current MCG_Lite frequency. 3. Work flow  Reset mode --&gt; LIRC8M    LIRC8M --&gt; HIRC    HIRC   --&gt; LIRC2M    LIRC2M --&gt; EXT    EXT    --&gt; HIRC    HIRC   --&gt; LIRC8M    LIRC8M --&gt; EXT    EXT    --&gt; LIRC2M    LIRC2M --&gt; HIRC    HIRC   --&gt; EXT    EXT    --&gt; LIRC8M    LIRC8M --&gt; LIRC2M    LIRC2M --&gt; LIRC8MIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/mcglite">
          <external path="boards/frdmkl43z/driver_examples/mcglite" type="xml">
            <files mask="mcglite.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="iar" compiler="compiler_iar" category="driver_examples/flash" path="boards/frdmkl43z/driver_examples/flash/pflash">
          <external path="boards/frdmkl43z/driver_examples/flash/pflash" type="xml">
            <files mask="pflash.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/pit">
          <external path="boards/frdmkl43z/driver_examples/pit" type="xml">
            <files mask="pit.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/power_manager">
          <external path="boards/frdmkl43z/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/power_mode_switch">
          <external path="boards/frdmkl43z/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/rtc">
          <external path="boards/frdmkl43z/driver_examples/rtc" type="xml">
            <files mask="rtc.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/rtc_func">
          <external path="boards/frdmkl43z/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="iar" compiler="compiler_iar" category="demo_apps" path="boards/frdmkl43z/demo_apps/shell">
          <external path="boards/frdmkl43z/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_slcd" name="slcd" brief="The SLCD example shows how to use SLCD driver." toolchain="iar" compiler="compiler_iar" category="driver_examples" path="boards/frdmkl43z/driver_examples/slcd">
          <external path="boards/frdmkl43z/driver_examples/slcd" type="xml">
            <files mask="slcd.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_dma_b2b_transfer_master" name="spi_dma_b2b_transfer_master" brief="The spi_dma_board2board_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_dma_b2b_transfer_slave" name="spi_dma_b2b_transfer_slave" brief="The spi_dma_board2board_slave example shows how to use spi driver as slave to do board to board transfer with DMA:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_interrupt" name="spi_interrupt" brief="The spi_interrupt example shows how to use spi functional API to do interrupt transfer:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/interrupt">
          <external path="boards/frdmkl43z/driver_examples/spi/interrupt" type="xml">
            <files mask="spi_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b/master">
          <external path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b/slave">
          <external path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/polling_b2b_transfer/master">
          <external path="boards/frdmkl43z/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="iar" compiler="compiler_iar" category="driver_examples/spi" path="boards/frdmkl43z/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="boards/frdmkl43z/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="iar" compiler="compiler_iar" category="driver_examples/tpm" path="boards/frdmkl43z/driver_examples/tpm/input_capture">
          <external path="boards/frdmkl43z/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="iar" compiler="compiler_iar" category="driver_examples/tpm" path="boards/frdmkl43z/driver_examples/tpm/output_compare">
          <external path="boards/frdmkl43z/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="iar" compiler="compiler_iar" category="driver_examples/tpm" path="boards/frdmkl43z/driver_examples/tpm/pwm_twochannel">
          <external path="boards/frdmkl43z/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="iar" compiler="compiler_iar" category="driver_examples/tpm" path="boards/frdmkl43z/driver_examples/tpm/simple_pwm">
          <external path="boards/frdmkl43z/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="iar" compiler="compiler_iar" category="driver_examples/tpm" path="boards/frdmkl43z/driver_examples/tpm/timer">
          <external path="boards/frdmkl43z/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_dma_rb_transfer" name="uart_dma_rb_transfer" brief="The uart_dma example shows how to use uart driver with DMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/dma_rb_transfer">
          <external path="boards/frdmkl43z/driver_examples/uart/dma_rb_transfer" type="xml">
            <files mask="uart_dma_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_dma_transfer" name="uart_dma_transfer" brief="The uart_dma example shows how to use uart driver with DMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/dma_transfer">
          <external path="boards/frdmkl43z/driver_examples/uart/dma_transfer" type="xml">
            <files mask="uart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/interrupt">
          <external path="boards/frdmkl43z/driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/interrupt_rb_transfer">
          <external path="boards/frdmkl43z/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/interrupt_transfer">
          <external path="boards/frdmkl43z/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="frdmkl43z_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="iar" compiler="compiler_iar" category="driver_examples/uart" path="boards/frdmkl43z/driver_examples/uart/polling">
          <external path="boards/frdmkl43z/driver_examples/uart/polling" type="xml">
            <files mask="uart_polling.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MKL43Z256xxx4" name="MKL43Z4" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MKL43Z256xxx4" family="KL4x" platform="Kinetis">
      <description>The Kinetis KL4x MCU family combines ultra-low-power performance with a rich suite of analog, communication, timing and control peripherals (including a segment LCD controller) for applications like electronic scales, flow meters, smart meters, and thermostats</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="USB_KHCI_Controller_number" value="1"/>
        <metadata key="html">
          <specific>
            <content>The Kinetis KL4x MCU family combines ultra-low-power performance with a rich suite of analog, communication, timing and control peripherals (including a segment LCD controller) for applications like electronic scales, flow meters, smart meters, and thermostatsIncludes multiple flexible low-power modes, including new compute mode which reduces dynamic power by placing peripherals in an asynchronous stop mode.Features security circuitry to prevent unauthorized access to RAM and flash contents.Provides a migration path to lower and higher performance and feature integration through compatibility with other Kinetis families.Backed by robust development tools and software.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKL43Z256xxx4" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKL43Z256xxx4" name="PROGRAM_FLASH" addr="00000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKL43Z256xxx4" name="SRAM" addr="1fffe000" size="00008000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="256" ram_size_kb="32"/>
      <package id="MKL43Z256VMP4" name="MKL43Z256VMP4"/>
      <package id="MKL43Z256VLH4" name="MKL43Z256VLH4"/>
      <evaluation_boards>
        <evaluation_board name="twrkl43z48m"/>
        <evaluation_board name="frdmkl43z"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKL43Z256xxx4" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKL43Z256xxx4" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKL43Z256xxx4" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKL43Z256xxx4">
              <driverBinary type="binary">
                <files mask="FTFA_1K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
    <device id="MKL17Z256xxx4" name="MKL17Z4" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MKL17Z256xxx4" family="KL1x" platform="Kinetis">
      <description>KL1x: Kinetis速 KL1x-48 MHz, Mainstream Small Ultra-Low Power Microcontrollers (MCUs) based on ARM速 Cortex速-M0+ Core</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The Kinetis速 KL1x is a general purpose ultra-low-power MCU family, providing additional memory, communications and analog peripheral options beyond those offered in the Kinetis KL0x MCU family.The KL1x MCU family is compatible with Kinetis K10 MCUs (based on ARM速 Cortex速-M4) and with all other Kinetis KL1x, KL2x, KL3x and KL4x series MCUs, providing a migration path to higher performance and feature integration.</content>
          </specific>
        </metadata>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKL17Z256xxx4" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKL17Z256xxx4" name="PROGRAM_FLASH" addr="00000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKL17Z256xxx4" name="SRAM" addr="1fffe000" size="00008000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="256" ram_size_kb="32"/>
      <package id="MKL17Z256VFM4" name="MKL17Z256VFM4"/>
      <package id="MKL17Z256VMP4" name="MKL17Z256VMP4"/>
      <package id="MKL17Z256VFT4" name="MKL17Z256VFT4"/>
      <package id="MKL17Z256VLH4" name="MKL17Z256VLH4"/>
      <evaluation_boards>
        <evaluation_board name="twrkl43z48m"/>
        <evaluation_board name="frdmkl43z"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKL17Z256xxx4" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKL17Z256xxx4" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKL17Z256xxx4" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKL17Z256xxx4">
              <driverBinary type="binary">
                <files mask="FTFA_1K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmkl43z.MKL43Z4" name="frdmkl43z" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKL43Z4"/>
          <component_dependency value="component.lpuart_adapter.MKL43Z4"/>
          <component_dependency value="platform.drivers.port.MKL43Z4"/>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="utility.debug_console.MKL43Z4"/>
          <component_dependency value="component.serial_manager.MKL43Z4"/>
          <component_dependency value="platform.drivers.gpio.MKL43Z4"/>
          <component_dependency value="platform.drivers.smc.MKL43Z4"/>
          <component_dependency value="platform.drivers.clock.MKL43Z4"/>
          <component_dependency value="device.MKL43Z4_startup.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="boards/frdmkl43z/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/frdmkl43z/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MKL43Z4" name="CMSIS" version="5.5.1" devices="MKL43Z256xxx4" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKL43Z4"/>
          <component_dependency value="platform.Include_dsp.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="2.7.0" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL43Z4" name="CAN" version="1.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4" name="Common" version="2.7.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL43Z4" name="Ethernet" version="2.1.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL43Z4" name="Ethernet_MAC" version="2.1.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL43Z4" name="Ethernet_PHY" version="2.1.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL43Z4" name="Flash" version="2.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL43Z4" name="I2C" version="2.3.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL43Z4" name="MCI" version="2.3.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL43Z4" name="NAND" version="2.3.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL43Z4" name="SAI" version="1.1.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL43Z4" name="SPI" version="2.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL43Z4" name="USART" version="2.3.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL43Z4" name="USB" version="2.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL43Z4" name="USB_Device" version="2.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL43Z4" name="USB_Host" version="2.2.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKL43Z4" name="WiFi" version="1.0.0" devices="MKL43Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL43Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MKL43Z4" name="CMSIS_Include_common" version="5.2.1" devices="MKL43Z256xxx4" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm0plus.MKL43Z4" name="CMSIS_Include_core_cm0plus" version="5.2.1" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKL43Z4"/>
          <component_dependency value="platform.Include_dsp.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm0plus.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MKL43Z4" name="CMSIS_Include_dsp" version="1.6.0" devices="MKL43Z256xxx4" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="project_template.MKL43Z4.MKL43Z4" name="MKL43Z4" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKL43Z4"/>
          <component_dependency value="component.lpuart_adapter.MKL43Z4"/>
          <component_dependency value="platform.drivers.port.MKL43Z4"/>
          <component_dependency value="platform.drivers.gpio.MKL43Z4"/>
          <component_dependency value="platform.drivers.smc.MKL43Z4"/>
          <component_dependency value="device.MKL43Z4_startup.MKL43Z4"/>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="utility.debug_console.MKL43Z4"/>
          <component_dependency value="component.serial_manager.MKL43Z4"/>
          <component_dependency value="platform.drivers.clock.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MKL43Z4/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MKL43Z4" name="RTE_Device" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
          <component_dependency value="platform.drivers.dmamux.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MKL43Z4" name="cmake_toolchain" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MKL43Z4" name="button" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.timer_manager.MKL43Z4"/>
          <component_dependency value="component.gpio_adapter.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.common_task.MKL43Z4" name="common_task" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.osa.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.ecspi_adapter.MKL43Z4" name="ecspi_adapter" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="ecspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.flash_adapter.MKL43Z4" name="flash_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.flash.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/internal_flash" target_path="component/internal_flash" type="c_include">
        <files mask="flash.h"/>
      </source>
      <source path="components/internal_flash" target_path="component/internal_flash" type="src">
        <files mask="flash_adapter.c"/>
      </source>
    </component>
    <component id="component.gpio_adapter.MKL43Z4" name="gpio_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKL43Z4"/>
          <component_dependency value="platform.drivers.port.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MKL43Z4" name="led" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.timer_manager.MKL43Z4"/>
          <component_dependency value="component.gpio_adapter.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MKL43Z4" name="lists" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MKL43Z4" name="lptmr_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.lptmr.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MKL43Z4" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.lpuart.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MKL43Z4" name="mem_manager" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.minispi_adapter.MKL43Z4" name="minispi_adapter" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="minispi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.osa.MKL43Z4" name="osa" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKL43Z4" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MKL43Z4" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MKL43Z4" name="osa_bm" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.panic.MKL43Z4" name="panic" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="utility.debug_console.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pit_adapter.MKL43Z4" name="pit_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.pit.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="pit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.pwm_tpm_adapter.MKL43Z4" name="pwm_tpm_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.tpm.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MKL43Z4" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKL43Z4"/>
            <component_dependency value="component.serial_manager_usb_cdc_virtual.MKL43Z4"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MKL43Z4" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <component_dependency value="platform.drivers.uart.MKL43Z4"/>
          <component_dependency value="platform.drivers.lpuart.MKL43Z4"/>
        </any_of>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.frdmkl43z.MKL43Z4" name="frdmkl43z" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="boards/frdmkl43z/component_examples/config" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_virtual.MKL43Z4" name="serial_manager_usb_cdc_virtual" version="1.0.0" full_name="Serial Manager USB CDC Virtual" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="false" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb_virtual.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb_virtual.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MKL43Z4" name="software_crc_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.spi_adapter.MKL43Z4" name="spi_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.spi.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="spi_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MKL43Z4" name="timer_manager" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MKL43Z4"/>
            <component_dependency value="component.pit_adapter.MKL43Z4"/>
            <component_dependency value="component.lptmr_adapter.MKL43Z4"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.tpm_adapter.MKL43Z4" name="tpm_adapter" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.tpm.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.uart_adapter.MKL43Z4" name="uart_adapter" version="1.0.0" full_name="uart_adapter" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
          <component_dependency value="platform.drivers.uart.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="uart_adapter.c"/>
      </source>
    </component>
    <component id="component.vspi_adapter.MKL43Z4" name="vspi_adapter" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="vspi_adapter.c"/>
      </source>
    </component>
    <component id="device.MKL43Z4_CMSIS.MKL43Z4" name="MKL43Z4_CMSIS" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4" target_path="device" type="c_include">
        <files mask="MKL43Z4.h"/>
        <files mask="MKL43Z4_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MKL43Z4_debugger.MKL43Z4" name="MKL43Z4_debugger" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="debugger">
      <source path="devices/MKL43Z4" target_path="MKL43Z4" type="xml">
        <files mask="MKL43Z4.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKL43Z4_linker.MKL43Z4" name="MKL43Z4_linker" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="linker">
      <source toolchain="iar" path="devices/MKL43Z4/iar" target_path="MKL43Z4/iar" type="linker">
        <files mask="MKL43Z256xxx4_flash.icf"/>
        <files mask="MKL43Z256xxx4_ram.icf"/>
      </source>
    </component>
    <component id="device.MKL43Z4_startup.MKL43Z4" name="MKL43Z4_startup" version="1.0.0" devices="MKL43Z256xxx4" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="iar" path="devices/MKL43Z4/iar" target_path="startup" type="asm_include">
        <files mask="startup_MKL43Z4.s"/>
      </source>
      <source path="devices/MKL43Z4" target_path="device" type="src">
        <files mask="system_MKL43Z4.c"/>
      </source>
      <source path="devices/MKL43Z4" target_path="device" type="c_include">
        <files mask="system_MKL43Z4.h"/>
      </source>
    </component>
    <component id="docs.MKL43Z4.MKL43Z4" name="MKL43Z4" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-KL43Z and TWR-KL43Z48M.pdf"/>
      </source>
    </component>
    <component id="docs.images.MKL43Z4" name="images" version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="documentation">
      <source path="docs/images" target_path="images" type="image">
        <files mask="FRDM-KL43Z.gif"/>
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MKL43Z4" name="adc" brief="ADC16 Driver" version="2.0.3" full_name="ADC16 Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MKL43Z4" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MKL43Z4" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_cmsis_dma.MKL43Z4" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.2" full_name="I2C CMSIS DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c_dma.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL43Z4"/>
          <component_dependency value="RTE_Device.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_dma.MKL43Z4" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_dma.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL43Z4"/>
          <component_dependency value="RTE_Device.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi_cmsis_dma.MKL43Z4" name="spi_cmsis" brief="SPI CMSIS Driver" version="2.0.0" full_name="SPI CMSIS DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi_dma.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL43Z4"/>
          <component_dependency value="RTE_Device.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_cmsis.c"/>
      </source>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_cmsis_dma.MKL43Z4" name="uart_cmsis" brief="UART CMSIS Driver" version="2.0.1" full_name="UART CMSIS DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart_dma.MKL43Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL43Z4"/>
          <component_dependency value="RTE_Device.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_cmsis.c"/>
      </source>
      <source path="devices/MKL43Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MKL43Z4" name="common" brief="COMMON Driver" version="2.2.2" full_name="COMMON Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKL43Z4"/>
          <component_dependency value="device.MKL43Z4_CMSIS.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.cop.MKL43Z4" name="cop" brief="COP Driver" version="2.0.1" full_name="COP Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_cop.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cop.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MKL43Z4" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="platform.drivers.dma.MKL43Z4" name="dma" brief="DMA Driver" version="2.0.2" full_name="DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmamux.MKL43Z4"/>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MKL43Z4" name="dmamux" brief="DMAMUX Driver" version="2.0.4" full_name="DMAMUX Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MKL43Z4" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MKL43Z4" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKL43Z4" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.2.0" full_name="FLEXIO I2C Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s.MKL43Z4" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s_dma.MKL43Z4" name="flexio_i2s_dma" brief="FLEXIO I2S DMA Driver" version="2.1.7" full_name="FLEXIO I2S DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_i2s.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi.MKL43Z4" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.1.3" full_name="FLEXIO SPI Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_spi_dma.MKL43Z4" name="flexio_spi_dma" brief="FLEXIO SPI DMA Driver" version="2.1.3" full_name="FLEXIO SPI DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
          <component_dependency value="platform.drivers.flexio_spi.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_spi_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_spi_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MKL43Z4" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.6" full_name="FLEXIO UART Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_dma.MKL43Z4" name="flexio_uart_dma" brief="FLEXIO UART DMA Driver" version="2.1.6" full_name="FLEXIO UART DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
          <component_dependency value="platform.drivers.flexio_uart.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MKL43Z4" name="gpio" brief="GPIO Driver" version="2.4.1" full_name="GPIO Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c.MKL43Z4" name="i2c" brief="I2C Driver" version="2.0.8" full_name="I2C Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_dma.MKL43Z4" name="i2c_dma" brief="I2C Driver" version="2.0.8" full_name="I2C DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MKL43Z4" name="llwu" brief="LLWU Driver" version="2.0.4" full_name="LLWU Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MKL43Z4" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MKL43Z4" name="lpuart" brief="LPUART Driver" version="2.2.8" full_name="LPUART Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_dma.MKL43Z4" name="lpuart_dma" brief="LPUART Driver" version="2.2.8" full_name="LPUART DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_dma.h"/>
      </source>
    </component>
    <component id="driver.mma8451q.MKL43Z4" name="mma8451q" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="components/mma8451q" target_path="accel" type="src">
        <files mask="fsl_mma.c"/>
      </source>
      <source path="components/mma8451q" target_path="accel" type="c_include">
        <files mask="fsl_mma.h"/>
      </source>
    </component>
    <component id="platform.drivers.pit.MKL43Z4" name="pit" brief="PIT Driver" version="2.0.2" full_name="PIT Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MKL43Z4" name="pmc" brief="PMC Driver" version="2.0.2" full_name="PMC Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MKL43Z4" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MKL43Z4" name="rcm" brief="RCM Driver" version="2.0.3" full_name="RCM Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MKL43Z4" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MKL43Z4" name="sai" brief="SAI Driver" version="2.2.2" full_name="SAI Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_dma.MKL43Z4" name="sai_dma" brief="SAI DMA Driver" version="2.2.0" full_name="SAI DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.sai.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MKL43Z4" name="sim" brief="SIM Driver" version="2.1.1" full_name="SIM Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.slcd.MKL43Z4" name="slcd" brief="SLCD Driver" version="2.0.2" full_name="SLCD Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_slcd.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_slcd.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MKL43Z4" name="smc" brief="SMC Driver" version="2.0.6" full_name="SMC Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi.MKL43Z4" name="spi" brief="SPI Driver" version="2.0.5" full_name="SPI Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi_dma.MKL43Z4" name="spi_dma" brief="SPI Driver" version="2.0.5" full_name="SPI DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MKL43Z4" name="tpm" brief="TPM Driver" version="2.0.6" full_name="TPM Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart.MKL43Z4" name="uart" brief="UART Driver" version="2.2.0" full_name="UART Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_dma.MKL43Z4" name="uart_dma" brief="UART Driver" version="2.2.0" full_name="UART DMA Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MKL43Z4"/>
          <component_dependency value="platform.drivers.dma.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_dma.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MKL43Z4" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source path="devices/MKL43Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MKL43Z4" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MKL43Z256xxx4" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="platform.utilities.misc_utilities.MKL43Z4" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MKL43Z256xxx4" user_visible="true" type="utilities"/>
    <component id="platform.utilities.assert.MKL43Z4" name="assert" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MKL43Z4" name="debug_console" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKL43Z4"/>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MKL43Z4/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MKL43Z4/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MKL43Z4/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MKL43Z4" name="notifier" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL43Z4"/>
      </dependencies>
      <source path="devices/MKL43Z4/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MKL43Z4/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MKL43Z4" name="shell" version="1.0.0" devices="MKL43Z256xxx4" device_cores="core0_MKL43Z256xxx4" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKL43Z4"/>
          <component_dependency value="component.lists.MKL43Z4"/>
          <component_dependency value="platform.drivers.common.MKL43Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL43Z4/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MKL43Z4/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MKL17Z4" name="CMSIS" version="5.5.1" devices="MKL17Z256xxx4" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKL17Z4"/>
          <component_dependency value="platform.Include_dsp.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKL17Z4" name="CAN" version="1.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4" name="Common" version="2.7.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL17Z4" name="Ethernet" version="2.1.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKL17Z4" name="Ethernet_MAC" version="2.1.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKL17Z4" name="Ethernet_PHY" version="2.1.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKL17Z4" name="Flash" version="2.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL17Z4" name="I2C" version="2.3.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKL17Z4" name="MCI" version="2.3.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKL17Z4" name="NAND" version="2.3.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKL17Z4" name="SAI" version="1.1.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL17Z4" name="SPI" version="2.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL17Z4" name="USART" version="2.3.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL17Z4" name="USB" version="2.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKL17Z4" name="USB_Device" version="2.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKL17Z4" name="USB_Host" version="2.2.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKL17Z4" name="WiFi" version="1.0.0" devices="MKL17Z256xxx4" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKL17Z4"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MKL17Z4" name="CMSIS_Include_common" version="5.2.1" devices="MKL17Z256xxx4" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm0plus.MKL17Z4" name="CMSIS_Include_core_cm0plus" version="5.2.1" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKL17Z4"/>
          <component_dependency value="platform.Include_dsp.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm0plus.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MKL17Z4" name="CMSIS_Include_dsp" version="1.6.0" devices="MKL17Z256xxx4" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="project_template.MKL17Z4.MKL17Z4" name="MKL17Z4" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKL17Z4"/>
          <component_dependency value="component.lpuart_adapter.MKL17Z4"/>
          <component_dependency value="platform.drivers.port.MKL17Z4"/>
          <component_dependency value="platform.drivers.gpio.MKL17Z4"/>
          <component_dependency value="platform.drivers.smc.MKL17Z4"/>
          <component_dependency value="device.MKL17Z4_startup.MKL17Z4"/>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="utility.debug_console.MKL17Z4"/>
          <component_dependency value="component.serial_manager.MKL17Z4"/>
          <component_dependency value="platform.drivers.clock.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MKL17Z4/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MKL17Z4" name="RTE_Device" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <component_dependency value="platform.drivers.dma.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MKL17Z4" name="cmake_toolchain" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MKL17Z4" name="button" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.timer_manager.MKL17Z4"/>
          <component_dependency value="component.gpio_adapter.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.common_task.MKL17Z4" name="common_task" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.osa.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.ecspi_adapter.MKL17Z4" name="ecspi_adapter" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="ecspi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.flash_adapter.MKL17Z4" name="flash_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.flash.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/internal_flash" target_path="component/internal_flash" type="c_include">
        <files mask="flash.h"/>
      </source>
      <source path="components/internal_flash" target_path="component/internal_flash" type="src">
        <files mask="flash_adapter.c"/>
      </source>
    </component>
    <component id="component.gpio_adapter.MKL17Z4" name="gpio_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKL17Z4"/>
          <component_dependency value="platform.drivers.port.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="gpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MKL17Z4" name="led" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.timer_manager.MKL17Z4"/>
          <component_dependency value="component.gpio_adapter.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MKL17Z4" name="lists" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lptmr_adapter.MKL17Z4" name="lptmr_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.lptmr.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lptmr_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MKL17Z4" name="lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.lpuart.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MKL17Z4" name="mem_manager" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.minispi_adapter.MKL17Z4" name="minispi_adapter" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="minispi_adapter.c"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
    </component>
    <component id="component.osa.MKL17Z4" name="osa" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKL17Z4" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MKL17Z4" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MKL17Z4" name="osa_bm" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.panic.MKL17Z4" name="panic" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="utility.debug_console.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pit_adapter.MKL17Z4" name="pit_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.pit.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="pit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.pwm_tpm_adapter.MKL17Z4" name="pwm_tpm_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.tpm.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MKL17Z4" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKL17Z4"/>
            <component_dependency value="component.serial_manager_usb_cdc_virtual.MKL17Z4"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MKL17Z4" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <any_of>
          <component_dependency value="platform.drivers.uart.MKL17Z4"/>
          <component_dependency value="platform.drivers.lpuart.MKL17Z4"/>
        </any_of>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_virtual.MKL17Z4" name="serial_manager_usb_cdc_virtual" version="1.0.0" full_name="Serial Manager USB CDC Virtual" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="false" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb_virtual.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb_virtual.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MKL17Z4" name="software_crc_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.spi_adapter.MKL17Z4" name="spi_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.spi.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="spi_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MKL17Z4" name="timer_manager" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MKL17Z4"/>
            <component_dependency value="component.pit_adapter.MKL17Z4"/>
            <component_dependency value="component.lptmr_adapter.MKL17Z4"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.tpm_adapter.MKL17Z4" name="tpm_adapter" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.tpm.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.uart_adapter.MKL17Z4" name="uart_adapter" version="1.0.0" full_name="uart_adapter" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
          <component_dependency value="platform.drivers.uart.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="uart_adapter.c"/>
      </source>
    </component>
    <component id="component.vspi_adapter.MKL17Z4" name="vspi_adapter" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="abstraction_layer">
      <source path="components/spi" target_path="component/spi" type="c_include">
        <files mask="spi.h"/>
      </source>
      <source path="components/spi" target_path="component/spi" type="src">
        <files mask="vspi_adapter.c"/>
      </source>
    </component>
    <component id="device.MKL17Z4_CMSIS.MKL17Z4" name="MKL17Z4_CMSIS" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4" target_path="device" type="c_include">
        <files mask="MKL17Z4.h"/>
        <files mask="MKL17Z4_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MKL17Z4_debugger.MKL17Z4" name="MKL17Z4_debugger" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="debugger">
      <source path="devices/MKL17Z4" target_path="MKL17Z4" type="xml">
        <files mask="MKL17Z4.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKL17Z4_linker.MKL17Z4" name="MKL17Z4_linker" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="linker">
      <source toolchain="iar" path="devices/MKL17Z4/iar" target_path="MKL17Z4/iar" type="linker">
        <files mask="MKL17Z256xxx4_flash.icf"/>
        <files mask="MKL17Z256xxx4_ram.icf"/>
      </source>
    </component>
    <component id="device.MKL17Z4_startup.MKL17Z4" name="MKL17Z4_startup" version="1.0.0" devices="MKL17Z256xxx4" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="iar" path="devices/MKL17Z4/iar" target_path="startup" type="asm_include">
        <files mask="startup_MKL17Z4.s"/>
      </source>
      <source path="devices/MKL17Z4" target_path="device" type="src">
        <files mask="system_MKL17Z4.c"/>
      </source>
      <source path="devices/MKL17Z4" target_path="device" type="c_include">
        <files mask="system_MKL17Z4.h"/>
      </source>
    </component>
    <component id="docs.MKL17Z4.MKL17Z4" name="MKL17Z4" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
      </source>
    </component>
    <component id="docs.images.MKL17Z4" name="images" version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="documentation">
      <source path="docs/images" target_path="images" type="image">
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MKL17Z4" name="adc" brief="ADC16 Driver" version="2.0.3" full_name="ADC16 Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MKL17Z4" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.cmp.MKL17Z4" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_cmsis_dma.MKL17Z4" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.2" full_name="I2C CMSIS DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c_dma.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKL17Z4"/>
          <component_dependency value="RTE_Device.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_dma.MKL17Z4" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_dma.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL17Z4"/>
          <component_dependency value="RTE_Device.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi_cmsis_dma.MKL17Z4" name="spi_cmsis" brief="SPI CMSIS Driver" version="2.0.0" full_name="SPI CMSIS DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi_dma.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKL17Z4"/>
          <component_dependency value="RTE_Device.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_cmsis.c"/>
      </source>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_cmsis_dma.MKL17Z4" name="uart_cmsis" brief="UART CMSIS Driver" version="2.0.1" full_name="UART CMSIS DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart_dma.MKL17Z4"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKL17Z4"/>
          <component_dependency value="RTE_Device.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_cmsis.c"/>
      </source>
      <source path="devices/MKL17Z4/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MKL17Z4" name="common" brief="COMMON Driver" version="2.2.2" full_name="COMMON Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKL17Z4"/>
          <component_dependency value="device.MKL17Z4_CMSIS.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.cop.MKL17Z4" name="cop" brief="COP Driver" version="2.0.1" full_name="COP Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_cop.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cop.h"/>
      </source>
    </component>
    <component id="platform.drivers.dac.MKL17Z4" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
    </component>
    <component id="platform.drivers.dma.MKL17Z4" name="dma" brief="DMA Driver" version="2.0.2" full_name="DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmamux.MKL17Z4"/>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmamux.MKL17Z4" name="dmamux" brief="DMAMUX Driver" version="2.0.4" full_name="DMAMUX Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
    </component>
    <component id="platform.drivers.flash.MKL17Z4" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flash.h"/>
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexio.MKL17Z4" name="flexio" brief="FLEXIO Driver" version="2.0.2" full_name="FLEXIO Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKL17Z4" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.2.0" full_name="FLEXIO I2C Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s.MKL17Z4" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_i2s_dma.MKL17Z4" name="flexio_i2s_dma" brief="FLEXIO I2S DMA Driver" version="2.1.7" full_name="FLEXIO I2S DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_i2s.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_i2s_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_i2s_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart.MKL17Z4" name="flexio_uart" brief="FLEXIO UART Driver" version="2.1.6" full_name="FLEXIO UART Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexio_uart_dma.MKL17Z4" name="flexio_uart_dma" brief="FLEXIO UART DMA Driver" version="2.1.6" full_name="FLEXIO UART DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
          <component_dependency value="platform.drivers.flexio_uart.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexio_uart_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexio_uart_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpio.MKL17Z4" name="gpio" brief="GPIO Driver" version="2.4.1" full_name="GPIO Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c.MKL17Z4" name="i2c" brief="I2C Driver" version="2.0.8" full_name="I2C Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.i2c_dma.MKL17Z4" name="i2c_dma" brief="I2C Driver" version="2.0.8" full_name="I2C DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.llwu.MKL17Z4" name="llwu" brief="LLWU Driver" version="2.0.4" full_name="LLWU Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
    </component>
    <component id="platform.drivers.lptmr.MKL17Z4" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MKL17Z4" name="lpuart" brief="LPUART Driver" version="2.2.8" full_name="LPUART Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_dma.MKL17Z4" name="lpuart_dma" brief="LPUART Driver" version="2.2.8" full_name="LPUART DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.pit.MKL17Z4" name="pit" brief="PIT Driver" version="2.0.2" full_name="PIT Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
    </component>
    <component id="platform.drivers.pmc.MKL17Z4" name="pmc" brief="PMC Driver" version="2.0.2" full_name="PMC Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.port.MKL17Z4" name="port" brief="PORT Driver" version="2.1.0" full_name="PORT Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
    </component>
    <component id="platform.drivers.rcm.MKL17Z4" name="rcm" brief="RCM Driver" version="2.0.3" full_name="RCM Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
    </component>
    <component id="platform.drivers.rtc.MKL17Z4" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MKL17Z4" name="sai" brief="SAI Driver" version="2.2.2" full_name="SAI Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_dma.MKL17Z4" name="sai_dma" brief="SAI DMA Driver" version="2.2.0" full_name="SAI DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.sai.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sim.MKL17Z4" name="sim" brief="SIM Driver" version="2.1.1" full_name="SIM Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
    </component>
    <component id="platform.drivers.smc.MKL17Z4" name="smc" brief="SMC Driver" version="2.0.6" full_name="SMC Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi.MKL17Z4" name="spi" brief="SPI Driver" version="2.0.5" full_name="SPI Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.spi_dma.MKL17Z4" name="spi_dma" brief="SPI Driver" version="2.0.5" full_name="SPI DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MKL17Z4" name="tpm" brief="TPM Driver" version="2.0.6" full_name="TPM Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart.MKL17Z4" name="uart" brief="UART Driver" version="2.2.0" full_name="UART Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.uart_dma.MKL17Z4" name="uart_dma" brief="UART Driver" version="2.2.0" full_name="UART DMA Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MKL17Z4"/>
          <component_dependency value="platform.drivers.dma.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_dma.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.vref.MKL17Z4" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source path="devices/MKL17Z4/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MKL17Z4" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MKL17Z256xxx4" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="platform.utilities.misc_utilities.MKL17Z4" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MKL17Z256xxx4" user_visible="true" type="utilities"/>
    <component id="platform.utilities.assert.MKL17Z4" name="assert" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MKL17Z4" name="debug_console" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKL17Z4"/>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MKL17Z4/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MKL17Z4/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MKL17Z4/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MKL17Z4" name="notifier" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKL17Z4"/>
      </dependencies>
      <source path="devices/MKL17Z4/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MKL17Z4/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MKL17Z4" name="shell" version="1.0.0" devices="MKL17Z256xxx4" device_cores="core0_MKL17Z256xxx4" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKL17Z4"/>
          <component_dependency value="component.lists.MKL17Z4"/>
          <component_dependency value="platform.drivers.common.MKL17Z4"/>
        </all>
      </dependencies>
      <source path="devices/MKL17Z4/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MKL17Z4/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
